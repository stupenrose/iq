-- simple happy path --
[DONE] build a single jar with 2 java classes

-- dependency resolution 1.0 --
[DONE] build a single jar with multiple, transient dependencies
[DONE] build a single jar with multiple, conflicting, transient dependencies

[DONE] user sees streaming output from his app when using watchrun

-- build more than one thing at once --
[DONE] multiple modules
   - [DONE] user adds module using cli tool
   - [DONE] user unregisters module using cli tool
[DONE] multiple modules with interdependencies

-- usability --

[DONE]cli starts the daemon if it isn't already running???
      or, package the daemon as 'cli-daemon'?

-- unleash other developers --
develop the generic API for other build processes

-- chain code transformers --
add a simple code templater to the mix of a java project - develop a generic api for standard transformers

-- dependency caching 2.0 --
use http cache headers, HEAD, etc. for cache invalidation

-- build more things --
build a single jar with java classes & static resources
build a single jar with java classes & jshint
build a single jar with java classes & jshint & minimization
build a single jar with java classes & jshint & require.js optimization
build a single jar with java classes & coffeescript
build a zip with coffeescript & jshint & minimization
build a war with java classes, coffeescript, jshint & minimization
build a single jar with scala classes & static resources
build a single jar with groovy classes & static resources
build a single jar with clojure code & static resources
build some haskell

-- maven export --
[DONE] configure a module to generate a maven companion pom

-- consume dependencies in interesting ways --
build a single jar that depends on unpacked zip stuff in the classpath

